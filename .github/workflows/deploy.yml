name: Backend Deploy to ECS with ALB (develop-cloud)

on:
  push:
    branches: [ develop-cloud ]

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
          build-args: |
            RDS_USER=${{ secrets.RDS_USER }}
            RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
            RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}
            RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}
            LANGCHAIN_PROJECT=${{ secrets.LANGCHAIN_PROJECT }}
            LANGCHAIN_ENDPOINT=${{ secrets.LANGCHAIN_ENDPOINT }}
            LANGCHAIN_TRACING_V2=${{ secrets.LANGCHAIN_TRACING_V2 }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            DATABASE_URL=postgresql+psycopg://${{ secrets.RDS_USER }}:${{ secrets.RDS_PASSWORD }}@${{ secrets.RDS_ENDPOINT }}:5432/${{ secrets.RDS_DB_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Render new ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name: rag-document-management-backend
          image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          environment-variables: |
            RDS_USER=${{ secrets.RDS_USER }}
            RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
            RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}
            RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}
            LANGCHAIN_PROJECT=${{ secrets.LANGCHAIN_PROJECT }}
            LANGCHAIN_ENDPOINT=${{ secrets.LANGCHAIN_ENDPOINT }}
            LANGCHAIN_TRACING_V2=${{ secrets.LANGCHAIN_TRACING_V2 }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            DATABASE_URL=postgresql+psycopg://${{ secrets.RDS_USER }}:${{ secrets.RDS_PASSWORD }}@${{ secrets.RDS_ENDPOINT }}:5432/${{ secrets.RDS_DB_NAME }}

      - name: Deploy ECS service with new task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
          
      - name: Verify deployment
        run: |
          echo "Waiting for service to stabilize..."
          sleep 30
          ALB_DNS="${{ secrets.ALB_DNS }}"
          if [ -n "$ALB_DNS" ]; then
            echo "Testing connection to ALB at $ALB_DNS"
            curl -s -o /dev/null -w "%{http_code}" "http://$ALB_DNS/fast_api/health" | grep -q "200" && echo "✅ Health check passed" || echo "❌ Health check failed"
          else
            echo "ALB_DNS secret not set, skipping verification"
          fi
